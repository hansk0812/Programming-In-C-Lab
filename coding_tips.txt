1. In addition to thinking about functions when you need to repetitively implement a functionality, when you think a piece of logic will make your code look too big/cluttered and cumbersome, write the logic as a function and call it from where you want the logic to be.
2. After you write the code, think about the theoretical aspects of a problem with respect to the code i.e. where is this variable instantiated, where is this variables's memory defined, where have I dereferenced this pointer etc.
3. Please don't remember a few changes and let the compiler decide which is the right code. This is a bad practice. Make sure you understand why things are happening either before the compiler or during debugging. This will help you with your advanced topics later in the degree. 
4. When solving pointer questions, make sure you understand which line of code corresponds to memory assignment of a particular variable. A C program should only assign the memory of a variable once. Every pointer operation can follow a solid memory assignment. Both declaration/instantiation and malloc assign memory to variables.
5. When you use pointers for multiple variables, make sure you don't re-use variable names. Because all the accesses are references, re-using variable names will cause memory overflow that has nothing to do with errors in your code.
6. Only memorize syntax. Everything else should be logical.
7. If you get overwhelmed when you're implementing something, try to break down your logic into simpler steps and use functions whenever you can. Writing down the steps and planning functions around something helps a lot. You can also test functions independent of your program flow.
8. Even though you have read and/or memorized available answers, try to re-create the code without looking back at the answers. Reading the code alone sometimes won't give you as much clarity as implementing it from scratch yourself. 
